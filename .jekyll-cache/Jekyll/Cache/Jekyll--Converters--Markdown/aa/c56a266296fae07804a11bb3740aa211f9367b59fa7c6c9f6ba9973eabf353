I"9<h5 id="原型链">原型链</h5>
<blockquote>
  <p>在任意对象和Object.prototype之间，存在着一条以非标准属性__proto__进行连接的链，那我们管这条链叫做<code class="highlighter-rouge">原型链</code></p>
</blockquote>

<p><code class="highlighter-rouge">原型</code>每个函数都有一个prototype属性,这个属性指向的就是原型对象. 实例有一个__proto__指向它构造函数的原型对象. <br /></p>

<p><code class="highlighter-rouge">原型链</code>当调用一个对象的属性时，如果自身对象未找到，便会去对象的__proto__属性去查找，找到原型，原型也拥有__proto__属性，所以对继续向上查找，一直找到Object.prototype.<strong>proto</strong> === null 
<br /> 
<code class="highlighter-rouge">特点</code>原型对象上的方法是被不同实例共有的, 当我们修改原型时，与之相关的对象也会继承这一改变。</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      <span class="c1">// 第一种方式：字面量</span>
      <span class="kd">var</span> <span class="nx">o1</span> <span class="o">=</span> <span class="p">{</span><span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">o1</span><span class="dl">'</span><span class="p">};</span>
      <span class="kd">var</span> <span class="nx">o2</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">({</span><span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">o2</span><span class="dl">'</span><span class="p">});</span>
      <span class="c1">// 第二种方式：构造函数</span>
      <span class="kd">var</span> <span class="nx">M</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span> <span class="p">};</span>
      <span class="kd">var</span> <span class="nx">o3</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">M</span><span class="p">(</span><span class="dl">'</span><span class="s1">o3</span><span class="dl">'</span><span class="p">);</span>
      <span class="c1">// 第三种方式：Object.create</span>
      <span class="kd">var</span> <span class="nx">p</span> <span class="o">=</span> <span class="p">{</span><span class="na">name</span><span class="p">:</span><span class="dl">'</span><span class="s1">p</span><span class="dl">'</span><span class="p">}</span>
      <span class="kd">var</span> <span class="nx">o4</span> <span class="o">=</span> <span class="nx">object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">p</span><span class="p">)</span>

      <span class="c1">// new 运算符的工作原理</span>
      <span class="kd">var</span> <span class="nx">new1</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">func</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">o</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">func</span><span class="p">.</span><span class="nx">prototype</span><span class="p">)</span>
        <span class="kd">var</span> <span class="nx">k</span> <span class="o">=</span> <span class="nx">func</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">o</span><span class="p">)</span>
        <span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">k</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">object</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">return</span> <span class="nx">k</span>
        <span class="p">}</span>
        <span class="k">else</span> <span class="p">{</span>
          <span class="k">return</span> <span class="nx">o</span>
        <span class="p">}</span>
      <span class="p">}</span>
</code></pre></div></div>
:ET