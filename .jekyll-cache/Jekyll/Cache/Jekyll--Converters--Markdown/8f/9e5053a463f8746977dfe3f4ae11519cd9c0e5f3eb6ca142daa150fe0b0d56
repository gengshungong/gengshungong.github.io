I"0<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="cm">/**
       * 类的声明
       */</span>
      <span class="kd">var</span> <span class="nx">Animal</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
          <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Animal</span><span class="dl">'</span><span class="p">;</span>
      <span class="p">};</span>

      <span class="cm">/**
       * es6中class的声明
       */</span>
      <span class="kd">class</span> <span class="nx">Animal2</span> <span class="p">{</span>
          <span class="kd">constructor</span> <span class="p">()</span> <span class="p">{</span>
              <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Animal2</span><span class="dl">'</span><span class="p">;</span>
          <span class="p">}</span>
      <span class="p">}</span>

      <span class="cm">/**
       * 实例化
       */</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">new</span> <span class="nx">Animal</span><span class="p">(),</span> <span class="k">new</span> <span class="nx">Animal2</span><span class="p">());</span>

      <span class="cm">/**
       * 借助构造函数实现继承
       */</span>
      <span class="kd">function</span> <span class="nx">Parent1</span> <span class="p">()</span> <span class="p">{</span>
          <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">parent1</span><span class="dl">'</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="nx">Parent1</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">say</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">parent1 say</span><span class="dl">'</span><span class="p">)</span>
      <span class="p">};</span> 
      <span class="kd">function</span> <span class="nx">Child1</span> <span class="p">()</span> <span class="p">{</span>
          <span class="nx">Parent1</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
          <span class="k">this</span><span class="p">.</span><span class="nx">type</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">child1</span><span class="dl">'</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">new</span> <span class="nx">Child1</span><span class="p">(),</span> <span class="k">new</span> <span class="nx">Child1</span><span class="p">().</span><span class="nx">say</span><span class="p">());</span>

      <span class="cm">/**
       * 借助原型链实现继承 (有缺点)
       */</span>
      <span class="kd">function</span> <span class="nx">Parent2</span> <span class="p">()</span> <span class="p">{</span>
          <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">parent2</span><span class="dl">'</span><span class="p">;</span>
          <span class="k">this</span><span class="p">.</span><span class="nx">play</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
      <span class="p">}</span>
      <span class="kd">function</span> <span class="nx">Child2</span> <span class="p">()</span> <span class="p">{</span>
          <span class="k">this</span><span class="p">.</span><span class="nx">type</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">child2</span><span class="dl">'</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="nx">Child2</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Parent2</span><span class="p">();</span>

      <span class="kd">var</span> <span class="nx">s1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Child2</span><span class="p">();</span>
      <span class="kd">var</span> <span class="nx">s2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Child2</span><span class="p">();</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">s1</span><span class="p">.</span><span class="nx">play</span><span class="p">,</span> <span class="nx">s2</span><span class="p">.</span><span class="nx">play</span><span class="p">);</span>
      <span class="nx">s1</span><span class="p">.</span><span class="nx">play</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>  <span class="c1">// s1改变会影响s2</span>

      <span class="cm">/**
       * 组合方式   (可修复原型继承的缺点)
       */</span>
      <span class="kd">function</span> <span class="nx">Parent3</span> <span class="p">()</span> <span class="p">{</span>
          <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">parent3</span><span class="dl">'</span><span class="p">;</span>
          <span class="k">this</span><span class="p">.</span><span class="nx">play</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
      <span class="p">}</span>
      <span class="kd">function</span> <span class="nx">Child3</span> <span class="p">()</span> <span class="p">{</span>
          <span class="nx">Parent3</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
          <span class="k">this</span><span class="p">.</span><span class="nx">type</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">child3</span><span class="dl">'</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="nx">Child3</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Parent3</span><span class="p">();</span>
      <span class="kd">var</span> <span class="nx">s3</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Child3</span><span class="p">();</span>
      <span class="kd">var</span> <span class="nx">s4</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Child3</span><span class="p">();</span>
      <span class="nx">s3</span><span class="p">.</span><span class="nx">play</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">s3</span><span class="p">.</span><span class="nx">play</span><span class="p">,</span> <span class="nx">s4</span><span class="p">.</span><span class="nx">play</span><span class="p">);</span>

      <span class="cm">/**
       * 组合继承的优化1
       * @type {String}
       */</span>
      <span class="kd">function</span> <span class="nx">Parent4</span> <span class="p">()</span> <span class="p">{</span>
          <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">parent4</span><span class="dl">'</span><span class="p">;</span>
          <span class="k">this</span><span class="p">.</span><span class="nx">play</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
      <span class="p">}</span>
      <span class="kd">function</span> <span class="nx">Child4</span> <span class="p">()</span> <span class="p">{</span>
          <span class="nx">Parent4</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
          <span class="k">this</span><span class="p">.</span><span class="nx">type</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">child4</span><span class="dl">'</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="nx">Child4</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nx">Parent4</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span>
      <span class="kd">var</span> <span class="nx">s5</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Child4</span><span class="p">();</span>
      <span class="kd">var</span> <span class="nx">s6</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Child4</span><span class="p">();</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">s5</span><span class="p">,</span> <span class="nx">s6</span><span class="p">);</span>

      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">s5</span> <span class="k">instanceof</span> <span class="nx">Child4</span><span class="p">,</span> <span class="nx">s5</span> <span class="k">instanceof</span> <span class="nx">Parent4</span><span class="p">);</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">s5</span><span class="p">.</span><span class="kd">constructor</span><span class="p">);</span>

      <span class="cm">/**
       * 组合继承的优化2  Object.create
       */</span>
      <span class="kd">function</span> <span class="nx">Parent5</span> <span class="p">()</span> <span class="p">{</span>
          <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">parent5</span><span class="dl">'</span><span class="p">;</span>
          <span class="k">this</span><span class="p">.</span><span class="nx">play</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">];</span>
      <span class="p">}</span>
      <span class="kd">function</span> <span class="nx">Child5</span> <span class="p">()</span> <span class="p">{</span>
          <span class="nx">Parent5</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
          <span class="k">this</span><span class="p">.</span><span class="nx">type</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">child5</span><span class="dl">'</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="nx">Child5</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">Parent5</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span>
</code></pre></div></div>
:ET